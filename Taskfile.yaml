version: '3'

vars:
#  PROXY:
#    -x http://127.0.0.1:7890
  VERSION:
    sh: git describe --tags --always
  COMMIT_SHA:
    sh: git rev-parse HEAD
  BUILD_DATE:
    sh: date '+%F %T'
  MAT_VERSION:
    sh: |
      curl {{.PROXY}} -sSL {{if .GITHUB_TOKEN}}-H 'Authorization: Bearer {{.GITHUB_TOKEN}}'{{end}} \
        https://api.github.com/repos/cauyy/mat/releases/latest | jq -r '.name'
  MAT_DASHBOARD_VERSION:
    sh: |
      curl {{.PROXY}}  -sSL {{if .GITHUB_TOKEN}}-H 'Authorization: Bearer {{.GITHUB_TOKEN}}'{{end}} \
        https://api.github.com/repos/MetaCubeX/metacubexd/releases/latest | jq -r '.name'
  MAT_DASHBOARD_YACD_VERSION:
    sh: |
      curl {{.PROXY}}  -sSL {{if .GITHUB_TOKEN}}-H 'Authorization: Bearer {{.GITHUB_TOKEN}}'{{end}} \
        https://api.github.com/repos/MetaCubeX/Yacd-meta/releases/latest | jq -r '.name'

tasks:
  clean:
    desc: Clean Up Build Cache Files
    cmds:
      - rm -rf build static
  mkdir:
    desc: Create Build Dir
    cmds:
      - mkdir -p build static
    status:
      - test -d build

  download-mmdb:
    desc: Download GeoIP2-CN MMDB
    cmds:
      - curl {{.PROXY}}  -sSL https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/country.mmdb > static/Country.mmdb
    status:
      - test -f static/Country.mmdb

  copy-tracing:
    desc: Copy Tracing Dashboard Config
    cmds:
      - cp -r tracing static/tracing
    status:
      - test -d static/tracing

  build-mat-dashboard:
    desc: Build Mat Dashboard
    cmds:
      - git clone --depth 1 --branch {{.MAT_DASHBOARD_YACD_VERSION}} https://github.com/MetaCubeX/Yacd-meta.git build/yacd
      - defer: rm -rf build/yacd
      - git clone --depth 1 --branch {{.MAT_DASHBOARD_VERSION}} https://github.com/MetaCubeX/metacubexd.git build/official
      - defer: rm -rf build/official
      - (cd build/yacd && pnpm install && pnpm build)
      - (cd build/official && pnpm install && pnpm build)
      - cp -r build/yacd/public static/yacd
      - cp -r build/official/dist static/official
    status:
      - test -d static/yacd
      - test -d static/official

  download-mat:
    desc: Download Mat
    vars:
      MAT_URL:
        sh: |
          curl {{.PROXY}}  -sSL {{if .GITHUB_TOKEN}}-H 'Authorization: Bearer {{.GITHUB_TOKEN}}'{{end}} \
            https://api.github.com/repos/cauyy/mat/releases/latest | \
            jq -r '.assets[].browser_download_url | select (. | test("mat-{{.PLATFORM}}-v\\d+.*gz"))'
    cmds:
      - curl {{.PROXY}}  -sSL {{.MAT_URL}} > build/mat-{{.PLATFORM}}.gz
      - gzip -d build/mat-{{.PLATFORM}}.gz
      - chmod +x build/mat-{{.PLATFORM}}
    status:
      - test -f build/mat-{{.PLATFORM}}

  copy-mat:
    desc: Copy Mat To Embed FS
    cmds:
      - task: download-mat
        vars: { PLATFORM: "{{.PLATFORM}}" }
      - cp -f build/mat-{{.PLATFORM}} static/xclash

  build-tpclash-mat:
    desc: Build TPClash With Mat
    label: build-mat-{{.PLATFORM}}
    cmds:
      - task: mkdir
      - task: download-mmdb
      - task: build-mat-dashboard
      - task: download-mat
        vars: { PLATFORM: "{{.PLATFORM}}" }
      - task: copy-mat
        vars: { PLATFORM: "{{.PLATFORM}}" }
      - |
        GOOS={{.GOOS}} GOARCH={{.GOARCH}} GOARM={{.GOARM}} GOAMD64={{.GOAMD64}} GOMIPS={{.GOMIPS}} \
        go build -trimpath -o build/tpclash-mat-{{.GOOS}}-{{.GOARCH}}{{if .GOAMD64}}-{{.GOAMD64}}{{end}}{{if .GOARM}}-v{{.GOARM}}{{end}} \
          -ldflags "{{if not .DEBUG}}-w -s{{end}} \
          -X 'main.build={{.BUILD_DATE}}' \
          -X 'main.commit={{.COMMIT_SHA}}' \
          -X 'main.version={{.VERSION}}' \
          -X 'main.clash=Mat {{.MAT_VERSION}}' \
          -X 'main.branch=mat' \
          -X 'main.binName=tpclash-mat-{{.GOOS}}-{{.GOARCH}}{{if .GOAMD64}}-{{.GOAMD64}}{{end}}{{if .GOARM}}-v{{.GOARM}}{{end}}'" \
          {{if .DEBUG}}-gcflags "all=-N -l"{{end}}



  linux-386-mat:
    desc: Build TPClash With Mat(linux/386)
    cmds:
      - task: build-tpclash-mat
        vars: {
          PLATFORM: linux-386,
          GOOS: linux,
          GOARCH: 386,
        }
  linux-amd64-mat:
    desc: Build TPClash With Mat(linux/amd64)
    cmds:
      - task: build-tpclash-mat
        vars: {
          PLATFORM: linux-amd64-compatible,
          GOOS: linux,
          GOARCH: amd64,
        }
  linux-amd64-v3-mat:
    desc: Build TPClash With Mat(linux/amd64-v3)
    cmds:
      - task: build-tpclash-mat
        vars: {
          PLATFORM: linux-amd64,
          GOOS: linux,
          GOARCH: amd64,
          GOAMD64: v3
        }
  linux-arm64-mat:
    desc: Build TPClash With Mat(linux/arm64)
    cmds:
      - task: build-tpclash-mat
        vars: {
          PLATFORM: linux-arm64,
          GOOS: linux,
          GOARCH: arm64
        }
  linux-armv5-mat:
    desc: Build TPClash With Mat(linux/armv5)
    cmds:
      - task: build-tpclash-mat
        vars: {
          PLATFORM: linux-armv5,
          GOOS: linux,
          GOARCH: arm,
          GOARM: 5
        }
  linux-armv6-mat:
    desc: Build TPClash With Mat(linux/armv6)
    cmds:
      - task: build-tpclash-mat
        vars: {
          PLATFORM: linux-armv6,
          GOOS: linux,
          GOARCH: arm,
          GOARM: 6
        }
  linux-armv7-mat:
    desc: Build TPClash With Mat(linux/armv7)
    cmds:
      - task: build-tpclash-mat
        vars: {
          PLATFORM: linux-armv7,
          GOOS: linux,
          GOARCH: arm,
          GOARM: 7
        }
  linux-mips-hardfloat-mat:
    desc: Build TPClash With Mat(linux/mips-hardfloat)
    cmds:
      - task: build-tpclash-mat
        vars: {
          PLATFORM: linux-mips-hardfloat,
          GOOS: linux,
          GOARCH: mips,
          GOMIPS: hardfloat
        }
  linux-mipsle-softfloat-mat:
    desc: Build TPClash With Mat(linux/mipsle-softfloat)
    cmds:
      - task: build-tpclash-mat
        vars: {
          PLATFORM: linux-mipsle-softfloat,
          GOOS: linux,
          GOARCH: mipsle,
          GOMIPS: softfloat
        }
  linux-mipsle-hardfloat-mat:
    desc: Build TPClash With Mat(linux/mipsle-hardfloat)
    cmds:
      - task: build-tpclash-mat
        vars: {
          PLATFORM: linux-mipsle-hardfloat,
          GOOS: linux,
          GOARCH: mipsle,
          GOMIPS: hardfloat
        }
  linux-mips64-mat:
    desc: Build TPClash With Mat(linux/mips64)
    cmds:
      - task: build-tpclash-mat
        vars: {
          PLATFORM: linux-mips64,
          GOOS: linux,
          GOARCH: mips64
        }
  linux-mips64le-mat:
    desc: Build TPClash With Mat(linux/mips64le)
    cmds:
      - task: build-tpclash-mat
        vars: {
          PLATFORM: linux-mips64le,
          GOOS: linux,
          GOARCH: mips64le
        }

  default:
    cmds:
      - task: clean
      - rm -rf static/yacd static/official
      - task: linux-amd64-mat
      - task: linux-arm64-mat
      - rm -rf static build/mat-*
      - cp flatcar.butane.yaml example.yaml build